#ifndef VPSC_CLASSES_H
#define VPSC_CLASSES_H

#include <string>
#include <memory>

#include <gsl/gsl_matrix.h>

using namespace std;

#define FCC_SLIP_SYSTEMS "FCC"
#define HCP_SLIP_SYSTEMS "HCP" 

//gsl_matrix wraper 3x3
class Vector;

class Matrix {

	public:
		Matrix();
		Matrix(initializer_list<double> d);
		Matrix(gsl_matrix* m);
		Matrix(Matrix&& other);

		Matrix operator*(const Matrix& m) const;
		Vector operator*(const Vector& v) const;
		Matrix operator+(const Matrix& mr) const;
		Matrix operator-(const Matrix& mr) const;

		Matrix& operator=(Matrix&& other);

		double get(size_t i, size_t j) const;
		
		gsl_matrix* get_matrix();
		gsl_matrix* get_matrix() const;

		double m11() const;
		double m12() const;
		double m13() const;
		double m21() const;
		double m22() const;
		double m23() const;
		double m31() const;
		double m32() const;
		double m33() const;

		Matrix give_inverse() const;
		Matrix give_transpose() const;

		void print() const;

		~Matrix();

		friend class Vector;
		
	private:
		gsl_matrix* matrix;

};

Matrix operator*(double d, const Matrix& m);

//vector wraper over gsl_matrix 1x3
class Vector {

	public:

		enum Orientation {horizontal=0,vertical};
		
		Vector(Orientation o=Orientation::horizontal);
		Vector(initializer_list<double> d, Orientation o=Orientation::horizontal);
		Vector(gsl_matrix* v, Orientation o=Orientation::horizontal);
		Vector(Vector&& other);
		Vector(const Vector& v);

		Vector operator*(const Matrix& m) const;
		Matrix operator*(const Vector& rv) const;
		Vector& operator=(Vector&& other);
	
		double v1() const;
		double v2() const;
		double v3() const;
		
		double get_length();
		void normalize();

		Vector give_transpose() const;
		Vector give_unit_vector(Orientation o=Orientation::horizontal) const;

		void print() const;
		bool ishorizontal() const;
		bool isvertical() const;

		~Vector();

		friend class Matrix;

	private:

		gsl_matrix* vector;
		Orientation orientation;

		double length;

		gsl_matrix* get_vector() const;
		gsl_matrix* create_vector();

};

class Settings {

	private:
		Settings(double ds, int md, double e, double sr, double def[9]);
		
		static Settings* instance;		

		double def_step;
		int max_def;
		double epsilon;
		double strain_rate;		

		//identity matrix
		gsl_matrix* I;

		//strain tensor
		gsl_matrix* def_mat;

		//Constraints
		//gsl_matrix* K1;
		//gsl_matrix* K2;

	public:
		static void create_settings(double ds, int md, double e, double sr, double def[9]);
		static void load_and_create_settings(string pathname);
		static Settings* get_instance();
		static Settings& get_ref_inst();

		double get_def_step() const;
		int get_max_def() const;
		double get_epsilon() const;
		double get_strain_rate() const;

		gsl_matrix* const get_identity() const;

		gsl_matrix* get_def();

		~Settings();

};

class Grain {

	public:
		Grain(double p1, double p, double p2, double weight);
		
		const Matrix& get_rotation_matrix() const;
		void print() const;
		double get_phi1() const {return phi1;};
		double get_phi() const {return phi;};
		double get_phi2() const {return phi2;};
		double get_weight() const {return weight;};

		~Grain();

	private:
		//Euler angles in radians
		double phi1, phi, phi2, weight;
		Matrix rotation_matrix;
	
};

class SlipSystem {

	public:
		//{hkl}<uvw>, {slip plane}<slip direction>
		SlipSystem(initializer_list<double> plane, initializer_list<double> direction, double tau, double mm, string label);
		SlipSystem(Vector& plane, Vector& dir, double tau, double mm, string label);	
	
		string get_label() const {return label;};

		const Vector& get_slip_plane() const {return slip_plane;};
		const Vector& get_slip_dir() const {return slip_direction;};

		const Matrix& get_def_mat() const {return deformation_matrix;};
		const Matrix& get_sym() const {return symetry_def_mat;};
		const Matrix& get_asym() const {return asymetry_def_mat;};

		double get_tau_0() const {return tau_0;};
		double get_m() const {return m;};

		~SlipSystem();

	private:
		//normalized 
		//spip_plane (1,3)
		Vector slip_plane;
		//slip_dir (3,1)
		Vector slip_direction;

		string label;

		Matrix deformation_matrix;

		//Symetry part of deformation matrix
		Matrix symetry_def_mat;

		//Antysymetry part of deformation matrix
		Matrix asymetry_def_mat;

		//critical resolved shear stress
		double tau_0;

		//viscoplastic parameter
		double m;

		void calculate();
};

typedef unique_ptr<SlipSystem> SlipSystem_uptr;

#endif //VPSC_CLASSES_H
